<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gitlab-ci on 阳明的博客</title>
    <link>https://www.qikqiak.com/tags/gitlab-ci/</link>
    <description>Recent content in gitlab-ci on 阳明的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.qikqiak.com/tags/gitlab-ci/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Gitlab CI 在 Kubernetes 中的 Docker 缓存</title>
      <link>https://www.qikqiak.com/post/gitlab-ci-docker-layer-cache-for-k8s-executor/</link>
      <pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.qikqiak.com/post/gitlab-ci-docker-layer-cache-for-k8s-executor/</guid>
      <description>&lt;p&gt;前面我们有文章介绍过如何在 Kubernetes 集群中使用 GitLab CI 来实现 CI/CD，在构建镜像的环节我们基本上都是使用的 &lt;code&gt;Docker On Docker&lt;/code&gt; 的模式，这是因为 Kubernetes 集群使用的是 Docker 这种容器运行时，所以我们可以将宿主机的 &lt;code&gt;docker.sock&lt;/code&gt; 文件挂载到容器中构建镜像，而最近我们在使用 Kubernetes 1.22.X 版本后将容器运行时更改为了 Containerd，这样节点上没有可用的 Docker 服务了，这个时候就需要更改构建镜像的模式了，当然要实现构建镜像的方式有很多，我们这里还是选择使用 Docker 来构建我们的 Docker 镜像，也就是使用 &lt;code&gt;Docker IN Docker&lt;/code&gt; 的模式。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
